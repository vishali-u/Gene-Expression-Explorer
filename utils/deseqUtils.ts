// Helper functions to run the differential expression analysis
// R-integration package: https://www.npmjs.com/package/r-integration
// Use executeRScript (a synchronous function) to run R scripts from Node.js

import { DESeq2Params } from "@/utils/types";
import fs from "fs";
import path from "path";

const R = require("r-integration");
const methodName = "runDGE";

export function runDESeq2(params: DESeq2Params): Promise<void> {
    return new Promise<void>((resolve, reject) => {
        const args = {
            countsPath: params.countsPath,
            metadataPath: params.metadataPath,
            baseline: params.baseline,
            experimental: params.experimental,
            minNumSamples: params.minNumSamples.toString(),
            minCounts: params.minCounts.toString(),
            adjustMethod: params.adjustMethod,
            alphaThreshold: params.alphaThreshold.toString(),
            logFCThreshold: params.logFCThreshold.toString(),
            outputDir: params.outputDir
        };

        // For checking the output of the R script
        const countsOutput = path.join(params.outputDir, 'normalized_counts.csv');
        const resultsOutput = path.join(params.outputDir, 'de_results.csv');

        // Run the R script
        const rScriptPath = path.join(process.cwd(), 'r-scripts/runDGE.R');
        try {
            const result = R.callMethod(rScriptPath, methodName, args);
            if (!fs.existsSync(countsOutput) || !fs.existsSync(resultsOutput)) {
                reject(new Error('Expected output files not generated by DESeq2 pipeline.'));
            } else {
                resolve();
            }
        } catch (error) {
            reject(new Error(`DESeq2 execution failed: ${error}`));
        }
    });
}